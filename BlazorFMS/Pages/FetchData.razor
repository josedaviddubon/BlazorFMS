@page "/fetchdata"
@using BlazorFMS.Data
@using BlazorFMS.Data.BlazorFMS
@inject AuthenticationStateProvider AuthenticationStateProvider
@*

*@
@inherits OwningComponentBase<WeatherForecastService>

<h1>Weather forecast</h1>

<AuthorizeView>

    <Authorized>
        <h4>Hello, @context.User.Identity.Name!</h4>
        @if (forecasts == null)
        {
            
            <p><em>Loading...</em></p>
        }
        else
        {
           
            <table class="table">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Temp. (C)</th>
                        <th>Temp. (F)</th>
                        <th>Summary</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var forecast in forecasts)
                    {
                        <tr>
                            <td>@forecast.Date.Value.ToShortDateString()</td>
                            <td>@forecast.TemperatureC</td>
                            <td>@forecast.TemperatureF</td>
                            <td>@forecast.Summary</td>
                            <td>
                              
                                <button class="btn btn-primary"
                                @onclick="(() => EditForecast(forecast))">
                                    Edit
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <p>
               
                <button class="btn btn-primary"
                    @onclick="AddNewForecast">
                    Add New Forecast
                </button>
            </p>


            @if (ShowPopup)
            {
                
                <div class="modal" tabindex="-1" style="display:block" role="dialog">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h3 class="modal-title">Edit Forecast</h3>
                                <!-- Button to close the popup -->
                                <button type="button" class="close"
                                @onclick="ClosePopup">
                                    <span aria-hidden="true">X</span>
                                </button>
                            </div>
                            <!-- Edit form for the current forecast -->
                            <EditForm Context="formContext"
                              Model="objWeatherForecast"
                              OnValidSubmit="SaveForecast">
                                <!-- This will validate the form -->
                                <DataAnnotationsValidator />
                                <!-- This will show any validation errors -->
                                @*<ValidationSummary />*@
                                <ul class="validation-errors">
                                    @foreach (
                                   var message in formContext.GetValidationMessages()
                                   .Where(x => !x.Contains("Summary")))
                                    {
                                        <li class="validation-message">@message</li>
                                    }
                                </ul>
                                <div class="modal-body">
                                    <p>
                                        <label for="Date">Date: </label>
                                        <InputDate id="Date" class="form-control"
                                           placeholder="Date"
                                           @bind-Value="objWeatherForecast.Date" />
                                    </p><p>
                                        <label for="TemperatureC">Celsius: </label>
                                        <InputNumber id="TemperatureC" class="form-control"
                                             placeholder="Celsius forecast"
                                             @bind-Value="objWeatherForecast.TemperatureC" />
                                    </p><p>
                                        <label for="TemperatureF">Fahrenheit: </label>
                                        <InputNumber id="TemperatureF" class="form-control"
                                             placeholder="Fahrenheit forecast"
                                             @bind-Value="objWeatherForecast.TemperatureF" />
                                    </p><p>
                                        <label for="Summary">Summary: </label>
                                        <InputSelect id="Summary" class="form-control"
                                             @bind-Value="objWeatherForecast.Summary">
                                            @foreach (var option in SummaryOptions)
                                            {
                                                <option value="@option.OptionValue">
                                                    @option.OptionName
                                                </option>
                                            }
                                            /**/
                                        </InputSelect>
                                        <ValidationMessage For="@(() => objWeatherForecast.Summary)" />
                                    </p>
                                    <br />
                                    <!-- Button to save the forecast -->
                                    <button class="btn btn-primary"
                                    type="submit">
                                        Save
                                    </button>
                                    <!-- Only show delete button if not a new record -->
                                    @if (objWeatherForecast.Id > 0)
                                    {
                                        <!-- Button to delete the forecast -->
                                        <button class="btn btn-primary"
                                    @onclick="DeleteForecast">
                                            Delete
                                        </button>
                                    }
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>
            }


        }
    </Authorized>
    <!-- Show this section if the user is not logged in -->
    <NotAuthorized>
        <p>You're not signed in.</p>
    </NotAuthorized>
</AuthorizeView>
@code {
    // AuthenticationState is available as a CascadingParameter
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    List<WeatherForecast> forecasts;

    List<WeatherForecastOptions> SummaryOptions = new List<WeatherForecastOptions>() {
    new WeatherForecastOptions() { OptionName = "Select...", OptionValue = " " },
        new WeatherForecastOptions() { OptionName = "Hot", OptionValue = "Hot" },
        new WeatherForecastOptions() { OptionName = "Mild", OptionValue = "Mild" },
        new WeatherForecastOptions() { OptionName = "Cold", OptionValue = "Cold" }};

    protected override async Task OnInitializedAsync()
    {
        // Get the current user
        var user = (await authenticationStateTask).User;

        // Get the forecasts for the current user
        // We access WeatherForecastService using @Service
        forecasts = await @Service.GetForecastAsync(user.Identity.Name);
    }



    WeatherForecast objWeatherForecast = new WeatherForecast();

    bool ShowPopup = false;
    void ClosePopup()
    {
        // Close the Popup
        ShowPopup = false;
    }
    void AddNewForecast()
    {
        // Make new forecast
        objWeatherForecast = new WeatherForecast();
        // Set Id to 0 so we know it is a new record
        objWeatherForecast.Id = 0;
        // Open the Popup
        ShowPopup = true;
    }
    async Task SaveForecast()
    {
        // Close the Popup
        ShowPopup = false;
        // Get the current user
        var user = (await authenticationStateTask).User;
        // A new forecast will have the Id set to 0
        if (objWeatherForecast.Id == 0)
        {
            // Create new forecast
            WeatherForecast objNewWeatherForecast = new WeatherForecast();
            objNewWeatherForecast.Date = objWeatherForecast.Date;
            objNewWeatherForecast.Summary = objWeatherForecast.Summary;
            objNewWeatherForecast.TemperatureC =
            Convert.ToInt32(objWeatherForecast.TemperatureC);
            objNewWeatherForecast.TemperatureF =
            Convert.ToInt32(objWeatherForecast.TemperatureF);
            objNewWeatherForecast.UserName = user.Identity.Name;
            // Save the result
            var result =
            @Service.CreateForecastAsync(objNewWeatherForecast);
        }
        else
        {
            // This is an update
            var result =
            @Service.UpdateForecastAsync(objWeatherForecast);
        }
        // Get the forecasts for the current user
        forecasts =
        await @Service.GetForecastAsync(user.Identity.Name);
    }

    void EditForecast(WeatherForecast weatherForecast)
    {
        // Set the selected forecast
        // as the current forecast
        objWeatherForecast = weatherForecast;
        // Open the Popup
        ShowPopup = true;
    }

    async Task DeleteForecast()
    {
        // Close the Popup
        ShowPopup = false;

        // Get the current user
        var user = (await authenticationStateTask).User;

        // Delete the forecast
        var result = @Service.DeleteForecastAsync(objWeatherForecast);

        // Get the forecasts for the current user
        forecasts =
        await @Service.GetForecastAsync(user.Identity.Name);
    }

}