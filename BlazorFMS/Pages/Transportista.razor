@page "/transportista"
@using BlazorFMS.Data
@using BlazorFMS.Data.BlazorFMS

@inject AuthenticationStateProvider AuthenticationStateProvider

@inherits OwningComponentBase<TransportistaServices>
<h1>Transportistas</h1>

<AuthorizeView>
    <!-- Show this section if the user is logged in -->
    <Authorized>
        <h4>Hola, @context.User.Identity?.Name!</h4>
        @if (transportistas == null)
        {
            <!-- Show this if the current user has no data... yet... -->
            <p><em>Loading...</em></p>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Transportista ID</th>
                        <th>Nombre</th>
                        <th>Tarifa por Kilometro</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var transportistas in transportistas)
                    {
                        <tr>
                            <td>@transportistas.TransportistaId</td>
                            <td>@transportistas.Nombre</td>
                            <td>@transportistas.TarifaPorKilometro</td>
                            <td>
                                <!-- Edit the current forecast -->
                                <button class="btn btn-primary"
                                @onclick="(() => EditTransportista(transportistas))">
                                    Edit
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <p>
                <button class="btn btn-primary" @onclick="AddNewTransportista">Agregar nuevo Transportista</button>
            </p>
            @if (ShowPopup)
            {
                <div class="modal" tabindex="-1" style="display:block" role="dialog">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h3 class="modal-title">Transportistas</h3>
                                <!-- Button to close the popup -->
                                <button type="button" class="close"
                                @onclick="ClosePopup">
                                    <span aria-hidden="true">X</span>
                                </button>
                            </div>
                            <!-- Edit form for the current forecast -->
                            <div class="modal-body">
                                <div class="form-container">

                                    <div class="form-group">
                                        <label for="nombre">Nombre</label>
                                        <input class="form-control" type="text" placeholder="Nombre" @bind="objTransportistas.Nombre" />
                                    </div>

                                    <div class="form-group">
                                        <label for="direccion">Tarifa por Kilometro</label>
                                        <input class="form-control" type="number" id="Tarifa" @bind="objTransportistas.TarifaPorKilometro" />
                                    </div>
                                </div>
                                <br />
                                <!-- Button to save the forecast -->
                                <button class="btn btn-success"
                                @onclick="SaveTransportista">
                                    Save
                                </button>&nbsp;
                                @if (objTransportistas.TransportistaId > 0)
                                {
                                    <!-- Button to delete the forecast -->
                                    <button class="btn btn-danger"
                                @onclick="DeleteTransportista">
                                        Delete
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
                @if (ShowPopup)
                {

                }
            }

        }


    </Authorized>

    <!-- Show this section if the user is not logged in -->
    <NotAuthorized>
        <p>Inicia Sesión Para Acceder.</p>
    </NotAuthorized>
</AuthorizeView>

@code {

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }
    List<Transportistas> transportistas = new List<Transportistas>();
    private string UserIdentityName = "";
    protected override async Task OnInitializedAsync()
    {
        // Get the current user
        if (authenticationStateTask != null)
        {
            var user = (await authenticationStateTask).User;
            if (user.Identity != null)
            {
                UserIdentityName = user.Identity.Name ?? "";
            }
        }
        transportistas = await @Service.GetTransportistaAsync(UserIdentityName);
    }


    Transportistas objTransportistas = new Transportistas();

    bool ShowPopup = false;
    void ClosePopup()
    {
        // Close the Popup
        ShowPopup = false;
    }
    void AddNewTransportista()
    {
        // Make new forecast
        objTransportistas = new Transportistas();
        // Set Id to 0 so we know it is a new record
        objTransportistas.TransportistaId = 0;
        // Open the Popup
        ShowPopup = true;
    }
    async Task SaveTransportista()
    {
        // Close the Popup
        ShowPopup = false;

        if (objTransportistas.TransportistaId == 0)
        {

            Transportistas objNewTransportista = new Transportistas();
            objNewTransportista.Nombre = objTransportistas.Nombre;
            //objNewTransportista.Ubicacion = objTransportistas.Ubicacion;
            objNewTransportista.TarifaPorKilometro = objTransportistas.TarifaPorKilometro;
            objNewTransportista.UserName = UserIdentityName;
            var result =
            @Service.CreateTransportistaAsync(objNewTransportista);
        }
        else
        {
            var result =
          @Service.UpdateTransportistaAsync(objTransportistas);
        }
        // Get the forecasts for the current user
        transportistas =
        await @Service.GetTransportistaAsync(UserIdentityName);

    }
    void EditTransportista(Transportistas transportistas)
    {

        objTransportistas = transportistas;
        // Open the Popup
        ShowPopup = true;
    }

    async Task DeleteTransportista()
    {

        ShowPopup = false;

        var result = @Service.DeleteTransportistaAsync(objTransportistas);

        transportistas =
        await @Service.GetTransportistaAsync(UserIdentityName);
    }
}
