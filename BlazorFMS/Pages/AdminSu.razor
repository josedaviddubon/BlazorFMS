@page "/administrar"
@using BlazorFMS.Data
@using BlazorFMS.Data.BlazorFMS


@inject AuthenticationStateProvider AuthenticationStateProvider

@inherits OwningComponentBase<AdministrarSucursalesServices>
@*@inject IToastService toastServices*@
<h1>Administrar Sucursal</h1>

<AuthorizeView>
    <!-- Show this section if the user is logged in -->
    <Authorized>
        <h4>Hola, @context.User.Identity?.Name!</h4>
        @if (Detsucursales == null)
        {
            <!-- Show this if the current user has no data... yet... -->
            <p><em>Loading...</em></p>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>ID Sucursal</th>
                        <th>NombresSucursal</th>
                        <th>Nombre Colaborador</th>
                        <th>DistanciaKilometros</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var Detsucursales in Detsucursales)
                    {
                        <tr>
                            <td>@Detsucursales.SucursalId</td>
                            <td>@GetSucursalNombre(Detsucursales.SucursalId)</td>
                            <td>@GetColaboradorNombre(Detsucursales.ColaboradorId)</td>
                            <td>@Detsucursales.DistanciaKilometros</td>

                            <td>
                                <!-- Edit the current forecast -->
                                <button class="btn btn-primary"
                                @onclick="(() => EditDetalle(Detsucursales))">
                                    Edit
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <p>
                <button class="btn btn-primary" @onclick="AddNewDet">Agregar nueva Sucursal</button>
            </p>
            @if (ShowPopup)
            {
                <div class="modal" tabindex="-1" style="display:block" role="dialog">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h3 class="modal-title">Sucursal</h3>
                                <!-- Button to close the popup -->
                                <button type="button" class="close"
                                @onclick="ClosePopup">
                                    <span aria-hidden="true">X</span>
                                </button>
                            </div>
                            <!-- Edit form for the current forecast -->
                            <EditForm Context="formContext"
                              Model="objDetalles"
                              OnValidSubmit="SaveDet">
                                <DataAnnotationsValidator />
                                <ul class="validation-errors">
                                </ul>
                                <div class="modal-body">

                                    <p>
                                        <label for="SucursalId">Sucursal: </label>
                                        <InputSelect id="SucursalId" class="form-control"
                                             @bind-Value="objSucursales.SucursalId">
                                            @foreach (var sucursal in sucursales)
                                            {
                                                <option value="@sucursal.SucursalId">@sucursal.Nombre</option>
                                            }

                                        </InputSelect>
                                       @* <ValidationMessage For="@(() => objSucursales.SucursalId)" />*@
                                    </p>

                                    <p>
                                        <label for="ColaboradorId">Colaborador: </label>
                                        <InputSelect id="ColaboradorId" class="form-control"
                                             @bind-Value="objColaborador.ColaboradorId">
                                            @foreach (var colaborador in colaboradores)
                                            {
                                                <option value="@colaborador.ColaboradorId">@colaborador.Nombre</option>
                                            }

                                        </InputSelect>
                                        @*<ValidationMessage For="@(() => objColaborador.ColaboradorId)" />*@
                                    </p>


                                    <p>
                                        <label for="DistanciaKilometros">Distancia Kilometros: </label>
                                        <InputNumber id="DistanciaKilometros" class="form-control"
                                             placeholder="DistanciaKilometros"
                                             @bind-Value="objDetalles.DistanciaKilometros" />
                                    </p>


                                    <br />

                                    <button class="btn btn-primary"
                                    type="submit">
                                        Save
                                    </button>

                                    @if (objDetalles.SucursalDetalleId > 0)
                                    {

                                        <button class="btn btn-primary">

                                            Delete
                                        </button>
                                    }
                                </div>

                            </EditForm>


                        </div>
                    </div>
                </div>

            }

        }



    </Authorized>

    <!-- Show this section if the user is not logged in -->
    <NotAuthorized>
        <p>Inicia Sesión Para Acceder.</p>
    </NotAuthorized>
</AuthorizeView>



@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }
    List<SucursalDetalles> Detsucursales = new List<SucursalDetalles>();
    List<Colaboradores> colaboradores = new List<Colaboradores>();
    List<Sucursales> sucursales = new List<Sucursales>();

    private string UserIdentityName = "";
    protected override async Task OnInitializedAsync()
    {
        // Get the current user
        if (authenticationStateTask != null)
        {
            var user = (await authenticationStateTask).User;
            if (user.Identity != null)
            {
                UserIdentityName = user.Identity.Name ?? "";
            }
        }
        Detsucursales = await @Service.GetDetalleAsync(UserIdentityName);

        colaboradores = await @Service.GetColaboradoresAsync(UserIdentityName);

        sucursales = await @Service.GetSucursalesAsync(UserIdentityName);
    }

    string GetColaboradorNombre(int? colaboradorId)
    {
        var colaborador = colaboradores.FirstOrDefault(c => c.ColaboradorId == colaboradorId);
        return colaborador != null ? colaborador.Nombre : "No encontrado";
    }

    string GetSucursalNombre(int? SucursalId)
    {
        var sucursal = sucursales.FirstOrDefault(c => c.SucursalId == SucursalId);
        return sucursal != null ? sucursal.Nombre : "No encontrado";
    }

    SucursalDetalles objDetalles = new SucursalDetalles();
    Colaboradores objColaborador = new Colaboradores();
    Sucursales objSucursales = new Sucursales();

    bool ShowPopup = false;
    void ClosePopup()
    {
        // Close the Popup
        ShowPopup = false;
    }
    void AddNewDet()
    {
        // Make new forecast
        objDetalles = new SucursalDetalles();
        // Set Id to 0 so we know it is a new record
        objDetalles.SucursalDetalleId = 0;
        // Open the Popup
        ShowPopup = true;
    }


    async Task SaveDets()
    {
        // Close the Popup
        ShowPopup = false;

        var existingDet = Detsucursales.FirstOrDefault(d => d.SucursalId == objSucursales.SucursalId);

        if (existingDet == null)
        {
            if (objDetalles.SucursalDetalleId == 0)

                if (objDetalles.DistanciaKilometros > 0 || objDetalles.DistanciaKilometros < 50)
                {
                    {

                        SucursalDetalles objNewDet = new SucursalDetalles();
                        objNewDet.ColaboradorId = objColaborador.ColaboradorId;
                        objNewDet.SucursalId = objSucursales.SucursalId;
                        objNewDet.DistanciaKilometros = objDetalles.DistanciaKilometros;
                        objNewDet.UserName = UserIdentityName;
                        var result =
                        @Service.CreateDetalleAsync(objNewDet);
                    }
                }
                else {
                    Console.WriteLine("Advertencia La distancia tiene que ser mayor a 0 y menor a 50");
                }

            else
            {
                var result =
              @Service.UpdateDetalleAsync(objDetalles);
            }
            Detsucursales =
                await @Service.GetDetalleAsync(UserIdentityName);
        }
        else
        {
            //toastService.ShowWarning("Advertencia El Colaborador Ya tiene asignada esta Sucursal");
           Console.WriteLine("Advertencia El Colaborador Ya tiene asignada esta Sucursal");
        }


    }

    async Task SaveDet()
    {
        // Close the Popup
        ShowPopup = false;

        var existingDet = Detsucursales.FirstOrDefault(d => d.SucursalId == objSucursales.SucursalId);

        if (existingDet == null)
        {
            if (objDetalles.SucursalDetalleId == 0)
            {
                if (objDetalles.DistanciaKilometros > 0 && objDetalles.DistanciaKilometros < 50)
                {
                    SucursalDetalles objNewDet = new SucursalDetalles();
                    objNewDet.ColaboradorId = objColaborador.ColaboradorId;
                    objNewDet.SucursalId = objSucursales.SucursalId;
                    objNewDet.DistanciaKilometros = objDetalles.DistanciaKilometros;
                    objNewDet.UserName = UserIdentityName;
                    var result = await @Service.CreateDetalleAsync(objNewDet);
                }
                else
                {
                    Console.WriteLine("Advertencia La distancia tiene que ser mayor a 0 y menor a 50");
                }
            }
            else
            {
                var result = await @Service.UpdateDetalleAsync(objDetalles);
            }

            Detsucursales = await @Service.GetDetalleAsync(UserIdentityName);
        }
        else
        {
            //toastService.ShowWarning("Advertencia El Colaborador Ya tiene asignada esta Sucursal");
            Console.WriteLine("Advertencia El Colaborador Ya tiene asignada esta Sucursal");
        }
    }


    void EditDetalle(SucursalDetalles detalles)
    {

        objDetalles = detalles;
        // Open the Popup
        ShowPopup = true;
    }
}
