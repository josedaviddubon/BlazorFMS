@page "/sucursales"
@using BlazorFMS.Data
@using BlazorFMS.Data.BlazorFMS

@inject AuthenticationStateProvider AuthenticationStateProvider

@inherits OwningComponentBase<SucursalService>
<h1>Sucursal</h1>

<AuthorizeView>
    <!-- Show this section if the user is logged in -->
    <Authorized>
        <h4>Hola, @context.User.Identity?.Name!</h4>
        @if (sucursales == null)
        {
            <!-- Show this if the current user has no data... yet... -->
            <p><em>Loading...</em></p>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Sucursal ID</th>
                        <th>Nombre</th>
                        <th>Ubicacion</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var sucursal in sucursales)
                    {
                        <tr>
                            <td>@sucursal.SucursalId</td>
                            <td>@sucursal.Nombre</td>
                            <td>@sucursal.Ubicacion</td>
                            <td>
                                <!-- Edit the current forecast -->
                                <button class="btn btn-primary"
                                @onclick="(() => EditSucursal(sucursal))">
                                    Edit
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <p>
                <button class="btn btn-primary" @onclick="AddNewSucursal">Agregar nueva Sucursal</button>
            </p>
            @if (ShowPopup)
            {
                <div class="modal" tabindex="-1" style="display:block" role="dialog">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h3 class="modal-title">Sucursal</h3>
                                <!-- Button to close the popup -->
                                <button type="button" class="close"
                                @onclick="ClosePopup">
                                    <span aria-hidden="true">X</span>
                                </button>
                            </div>
                            <!-- Edit form for the current forecast -->
                            <div class="modal-body">
                                <div class="form-container">

                                    <div class="form-group">
                                        <label for="nombre">Nombre:</label>
                                        <input class="form-control" type="text" placeholder="Nombre" @bind="objSucursales.Nombre" />
                                    </div>

                                    <div class="form-group">
                                        <label for="direccion">Ubicacion</label>
                                        <input class="form-control" type="text" id="direccion" @bind="objSucursales.Ubicacion" />
                                    </div>

                                    <!-- Agregar sección para detalles de sucursal -->
                                    <div class="form-group">
                                        <label for="colaborador">Colaborador:</label>
                                        <!-- Aquí puedes usar un desplegable (dropdown) para seleccionar colaboradores -->
                                        <select class="form-control" @bind="objColaborador.ColaboradorId">
                                            <option value="">Selecciona un colaborador</option>
                                            @foreach (var colaborador in colaboradores)
                                            {
                                                <option value="@colaborador.ColaboradorId">@colaborador.Nombre</option>
                                            }
                                        </select>
                                    </div>

                                    <div class="form-group">
                                        <label for="direccion">Distancia Kilometros</label>
                                        <input class="form-control" type="number" id="distancia" @bind="objDetSucursales.DistanciaKilometros" />
                                    </div>

                                </div>
                                <br />
                                <!-- Button to save the forecast -->
                                <button class="btn btn-success"
                                @onclick="SaveSucursal">
                                    Save
                                </button>&nbsp;
                                @if (objSucursales.SucursalId > 0)
                                {
                                    <!-- Button to delete the forecast -->
                                    <button class="btn btn-danger"
                                @onclick="DeleteSucursal">
                                        Delete
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }

        }
    </Authorized>

    <!-- Show this section if the user is not logged in -->
    <NotAuthorized>
        <p>Inicia Sesión Para Acceder.</p>
    </NotAuthorized>
</AuthorizeView>

@code {


    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }
    List<Sucursales> sucursales = new List<Sucursales>();
    private string UserIdentityName = "";
    List<Colaboradores> colaboradores = new List<Colaboradores>();
    protected override async Task OnInitializedAsync()
    {
        // Get the current user
        if (authenticationStateTask != null)
        {
            var user = (await authenticationStateTask).User;
            if (user.Identity != null)
            {
                UserIdentityName = user.Identity.Name ?? "";
            }
        }
        sucursales = await @Service.GetSucursalAsync(UserIdentityName);
        colaboradores = await @Service.GetColaboradoresAsync(UserIdentityName);
    }


    Sucursales objSucursales = new Sucursales();
    Colaboradores objColaborador = new Colaboradores();
    SucursalDetalles objDetSucursales = new SucursalDetalles();

    bool ShowPopup = false;
    void ClosePopup()
    {
        // Close the Popup
        ShowPopup = false;
    }
    void AddNewSucursal()
    {
        // Make new forecast
        objSucursales = new Sucursales();
        objDetSucursales = new SucursalDetalles();
        objColaborador = new Colaboradores();


        // Set Id to 0 so we know it is a new record
        objSucursales.SucursalId = 0;
        // Open the Popup
        ShowPopup = true;
    }
    async Task SaveSucursal()
    {
        // Close the Popup
        ShowPopup = false;

        if (objSucursales.SucursalId == 0)
        {

            Sucursales objNewSucursales = new Sucursales();
            objNewSucursales.Nombre = objSucursales.Nombre;
            objNewSucursales.Ubicacion = objSucursales.Ubicacion;
            objNewSucursales.UserName = UserIdentityName;

            var result =
            @Service.CreateSucursalAsync(objNewSucursales);

            SucursalDetalles detalle = new SucursalDetalles();
            {
                detalle.ColaboradorId = objDetSucursales.ColaboradorId; // Colaborador seleccionado

                if(objDetSucursales.DistanciaKilometros == 0 || objDetSucursales.DistanciaKilometros == 50)
                {

                }
                detalle.DistanciaKilometros = objDetSucursales.DistanciaKilometros; // Agrega la propiedad según tu modelo
            };
            

        }
        else
        {
            var result =
          @Service.UpdateSucursalAsync(objSucursales);
        }
        // Get the forecasts for the current user
        sucursales =
        await @Service.GetSucursalAsync(UserIdentityName);

    }




    void EditSucursal(Sucursales sucursales)
    {

        objSucursales = sucursales;
        // Open the Popup
        ShowPopup = true;
    }

    async Task DeleteSucursal()
    {

        ShowPopup = false;

        var result = @Service.DeleteSucursalAsync(objSucursales);

        sucursales =
        await @Service.GetSucursalAsync(UserIdentityName);
    }
}
